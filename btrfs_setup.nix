{pkgs, part, host, util, ...}:

let
    join = pkgs.lib.strings.concatStringsSep;
in pkgs.writeScriptBin "btrfs_setup_${host}" ''#!/usr/bin/env bash
# Auto-generated by btrfs_setup.nix. DO NOT EDIT.
#read -p "This will apply the config to ${join ", " (util.mapKeys part.order (dev: part.devices.${dev}.path))}. Are you sure? [y/N] " -r
#if [[ ! $REPLY =~ ^[Yy]$ ]]; then exit 1; fi
set -euxo pipefail

ROOT=/mnt

${join "" (util.mapKeys part.order (devName: let
    dev = part.devices.${devName};
    subvols = part.subvols.${devName} or [];
in ''
    : "Setting up ${devName} (${dev.path})..."
    MNT=/setup/${devName}/
    mkdir -p $MNT
    mount ${dev.path} $MNT
    : "Creating subvolumes..."
    ${join "" (util.mapKeys subvols (sub: ''
        : "Creating subvolume ${sub.name} at ${sub.mount}"
        btrfs subvolume create $MNT/${sub.name}
        ${join "" (util.mapKeys ([sub.mount] ++ (sub.additional_mounts or [])) (mount: ''
            : "Mounting ${sub.name} at ${mount}"
            mkdir -p $ROOT${mount}
            mount -o "subvol=${sub.name},noatime,compress=${sub.compress}" ${dev.path} $ROOT${mount}
        ''))}
    ''))}
    umount $MNT
    : "Mounting additional paths..."
    ${join "" (util.mapKeys dev.mounts or [] (mount: ''
        mkdir -p $ROOT${mount}
        mount ${dev.path} $ROOT${mount}
    ''))}
''))}
''
